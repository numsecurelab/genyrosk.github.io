{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"site":{"siteMetadata":{"title":"Evgeny's journey"}},"allMarkdownRemark":{"edges":[{"node":{"id":"cb4b1157-4cd8-5e46-87fd-ad171003de97","snippet":"<html><head></head><body><h4>A real problem I encountered</h4> <p>While learning to use Python Context Managers, I encountered a neat use case for them. At the time I was writing a data pipeline that was heavily querying an API and I would often quickly reach the API quota limits and my script would abruptly quit. My initial solution was to catch the exception and implement a loop that would try again after a time delay. It was a quick and dirty solution with a&#x2026;</p></body></html>","excerpt":"<h2>A real problem I encountered</h2>\n<p>While learning to use Python Context Managers, I encountered a neat use case for them. At the time I was writing a data pipeline that was heavily querying an API and I would often quickly reach the API quota limits and my script would abruptly quit. My initial solution was to catch the exception and implement a loop that would try again after a time delay. It was a quick and dirty solution with a lot of boilerplate code, but it worked as a first approach. Later I…</p>","timeToRead":10,"fields":{"slug":"/python-context-managers/"},"frontmatter":{"date":"Dec 31, 2018","title":"Build a request limiter using Python context managers (and decorators)"}}},{"node":{"id":"7cee5d4f-8934-5846-b461-2a347b0a0a3b","snippet":"<div class=\"custom-block-body\"><p>Whether you are a beginner or an advanced programmer, there are many reasons why you should choose Python for your next coding project. Python is a scripted language with an almost stupidly simple syntax, it is easy to learn and powerful to use. One of the main reasons that <del>I love</del> people love Python is that it offers quite a few specific metaphors (a.k.a. paradigms) for doing certain things. One of these things involves wrapping functions with some repetitively used code. And so, in your quest to becoming a true Pythonista lie a type function that will help you improve and streamline your code: <strong>decorators</strong>.</p></div>","excerpt":"<div class=\"custom-block snippet\"><div class=\"custom-block-body\"><p>Whether you are a beginner or an advanced programmer, there are many reasons why you should choose Python for your next coding project. Python is a scripted language with an almost stupidly simple syntax, it is easy to learn and powerful to use. One of the main reasons that <del>I love</del> people love Python is that it offers quite a few specific metaphors (a.k.a. paradigms) for doing certain things. One of these things involves wrapping functions with some repetitively used code. And so, in your quest…</p></div></div>","timeToRead":8,"fields":{"slug":"/python-decorators/"},"frontmatter":{"date":"Dec 30, 2018","title":"Learn Python decorators to simplify repeated pieces of logic"}}},{"node":{"id":"d50b2709-2a20-548a-a550-469955ffc73b","snippet":"<div class=\"custom-block-body\"><p>Whether you are familiar with Python generators or you have only heard a thing or two about them, allow me to summarise the 2 main properties of generator functions: </p><ul>\n<li>generators are <strong>stateful</strong> functions. </li>\n<li>generators <strong>delay computations until necessary</strong>. </li>\n</ul><p>As you are about to see, these properties make generators incredibly useful. </p></div>","excerpt":"<h4><strong><em>There are already many very helpful tutorials on the subject out there. In this piece I wanted to share my own take and experience with python generators that I have gathered while working on production-level Python code.</em></strong></h4>\n<!-- # Intro -->\n<div class=\"custom-block snippet\"><div class=\"custom-block-body\"><p>Whether you are familiar with Python generators or you have only heard a thing or two about them, allow me to summarise the 2 main properties of generator functions: </p><ul>\n<li>generators are <strong>stateful</strong> functions. </li>\n<li>generators <strong>delay computations until necessary</strong>. </li>\n</ul><p>As you are about to see…</p></div></div>","timeToRead":11,"fields":{"slug":"/python-generators/"},"frontmatter":{"date":"Dec 29, 2018","title":"A gentle introduction to Python generators"}}}]}},"pageContext":{}}}