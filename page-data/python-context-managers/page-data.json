{"componentChunkName":"component---src-templates-blog-post-js","path":"/python-context-managers/","result":{"data":{"markdownRemark":{"id":"cb4b1157-4cd8-5e46-87fd-ad171003de97","excerpt":"A real problem I encountered While learning to use Python Context Managers, I encountered a neat use case for them. At the time I was writing a data pipelineâ€¦","html":"<h2>A real problem I encountered</h2>\n<p>While learning to use Python Context Managers, I encountered a neat use case for them. At the time I was writing a data pipeline that was heavily querying an API and I would often quickly reach the API quota limits and my script would abruptly quit. My initial solution was to catch the exception and implement a loop that would try again after a time delay. It was a quick and dirty solution with a lot of boilerplate code, but it worked as a first approach. Later I found myself in the same problem when querying a different API and I realised that a more structured approach was necessary. </p>\n<p>Some time later I found out the existence of the <a href=\"https://github.com/RazerM/ratelimiter\">ratelimiter</a> package, and to my surprise: it also used context managers and the code looked very similar ! In addition, the package features a very neat usage of the decorator syntax and implements both synchronous and asynchronous versions.  </p>\n<p>In this article we are going to go through the basics of the context manager functionality, and then see it in action when implemented into a rate limiter class. </p>\n<h2>The purpose of context managers</h2>\n<p>The purpose of a context manager is to encapsulate a sequence of \"setup\" and \"teardown\" steps into a neat block of code. Any code that runs within that block runs within the context of a particular resource that is created in the process. In the background, a context manager implements this process for you. This process usually involves some sort of creation followed by deletion, an opening followed by closing (of a connection, for example), a building step followed by a breaking step (more metaphors are welcome).  </p>\n<p>Sounds confusing ? Don't worry, let's clear it up with some examples. </p>\n<h3>Opening a file</h3>\n<p>To open a file in Python you would usually write the follwing: </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data.txt'</span><span class=\"token punctuation\">)</span>\ntext <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\nf<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">Hello World</code></pre></div>\n<p>Notice the <code class=\"language-text\">open</code> and <code class=\"language-text\">close</code> logic. </p>\n<p>This code is equivalent to the following context manager: </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data.txt'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">## inside the context manager block </span>\n    text <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n    \n<span class=\"token comment\">## outside the context manager block </span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">Hello World</code></pre></div>\n<p>With a context manmager, the user no longer has to explicitely specify the closing step: the context manager does it for you as soon as you start a new line outside the block. Neat. </p>\n<h2>Building a context manager ...</h2>\n<h2>... as a class</h2>\n<p>A context manager can be implemented with special class underscore methods, namely <code class=\"language-text\">__enter__</code> and <code class=\"language-text\">__exit__</code>. </p>\n<p>Let's implement the file reader context manager: </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">readfile</span><span class=\"token punctuation\">:</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> file_name<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>file_name<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">__enter__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Code to acquire resource</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'>> __enter__'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>f\n        \n    <span class=\"token keyword\">def</span> <span class=\"token function\">__exit__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># __exit__ takes 3 extra arguments that we don't need to worry about</span>\n        <span class=\"token comment\"># Code to release resource</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'>> __exit__'</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">with</span> readfile<span class=\"token punctuation\">(</span><span class=\"token string\">'data.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    text <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token operator\">>></span> __enter__\nHello World\n\n<span class=\"token operator\">>></span> __exit__</code></pre></div>\n<p>Note how <code class=\"language-text\">self.f</code>, the resource object, is passed around the class and is ultimately surfaced by the <code class=\"language-text\">__enter__</code> method which allows the used to interact with the object inside the block of the context manager. </p>\n<h3>...as a generator</h3>\n<p>If you're familiar with Python generators and the logic you're writing is simple enough, you can implement a context manager with the generator syntax. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> contextlib <span class=\"token keyword\">import</span> contextmanager\n\n<span class=\"token decorator annotation punctuation\">@contextmanager</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">readfile</span><span class=\"token punctuation\">(</span>file_name<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Code to acquire resource</span>\n    f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>file_name<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'>> yield'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">yield</span> f\n    <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Code to release resource</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'>> finally'</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">with</span> readfile<span class=\"token punctuation\">(</span><span class=\"token string\">'data.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    text <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token operator\">>></span> yield\nHello World\n\n<span class=\"token operator\">>></span> finally</code></pre></div>\n<p>This syntax looks much simpler by using the <code class=\"language-text\">contextmanager</code> function to decorate the generator and convert it into a context manager. In the  background this decorator implements the <code class=\"language-text\">__enter__</code> and <code class=\"language-text\">__exit__</code> methods for us so we don't have to worry about them. All we need is a <code class=\"language-text\">try ... finally</code> logic. </p>\n<h2>The request limiter</h2>\n<h3>A simulated API</h3>\n<p>Let's simulate an API behaviour with the following generator, which normally returns a <code class=\"language-text\">200 OK</code> message when everything is ok, but will return an <code class=\"language-text\">403 Quota Exceeded</code> error message if a pre-defined quota limit has been exceeded. We will interface with the API generator using an intermediary <code class=\"language-text\">call_api</code> function to make things easier on the user side code. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> time \n        \n<span class=\"token keyword\">def</span> <span class=\"token function\">API</span><span class=\"token punctuation\">(</span>ping<span class=\"token operator\">=</span><span class=\"token number\">0.15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    limit <span class=\"token operator\">=</span> <span class=\"token number\">5</span>    <span class=\"token comment\"># allow up to 5 calls ...</span>\n    period <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span> <span class=\"token comment\"># ... per second</span>\n    calls <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span>ping<span class=\"token punctuation\">)</span> <span class=\"token comment\"># simulate response delay </span>\n        now <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        call_window <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>t <span class=\"token keyword\">for</span> t <span class=\"token keyword\">in</span> calls <span class=\"token keyword\">if</span> now <span class=\"token operator\">-</span> t <span class=\"token operator\">&lt;</span> period<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>call_window<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> limit<span class=\"token punctuation\">:</span>\n            calls <span class=\"token operator\">=</span> call_window <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">yield</span> <span class=\"token string\">'200 OK'</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">yield</span> <span class=\"token string\">'403 Quota Exceeded'</span>\n\napi <span class=\"token operator\">=</span> API<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">call_api</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>api<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Now if we simulate this API object with very rapid calls, we should get an error message back once we exceed the quota of 5 calls per second. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    result <span class=\"token operator\">=</span> call_api<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'second [</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> start<span class=\"token punctuation\">:</span><span class=\"token format-spec\">.2f</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">] call [</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">}</span></span><span class=\"token string\">]: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>result<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">second <span class=\"token punctuation\">[</span><span class=\"token number\">0.15</span><span class=\"token punctuation\">]</span> call <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\nsecond <span class=\"token punctuation\">[</span><span class=\"token number\">0.31</span><span class=\"token punctuation\">]</span> call <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\nsecond <span class=\"token punctuation\">[</span><span class=\"token number\">0.46</span><span class=\"token punctuation\">]</span> call <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\nsecond <span class=\"token punctuation\">[</span><span class=\"token number\">0.62</span><span class=\"token punctuation\">]</span> call <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\nsecond <span class=\"token punctuation\">[</span><span class=\"token number\">0.77</span><span class=\"token punctuation\">]</span> call <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\nsecond <span class=\"token punctuation\">[</span><span class=\"token number\">0.92</span><span class=\"token punctuation\">]</span> call <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">403</span> Quota Exceeded\nsecond <span class=\"token punctuation\">[</span><span class=\"token number\">1.07</span><span class=\"token punctuation\">]</span> call <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">403</span> Quota Exceeded\nsecond <span class=\"token punctuation\">[</span><span class=\"token number\">1.22</span><span class=\"token punctuation\">]</span> call <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\nsecond <span class=\"token punctuation\">[</span><span class=\"token number\">1.37</span><span class=\"token punctuation\">]</span> call <span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\nsecond <span class=\"token punctuation\">[</span><span class=\"token number\">1.52</span><span class=\"token punctuation\">]</span> call <span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK</code></pre></div>\n<p>But if we introduce a long enough delay between the calls, the API will no longer respond with a <code class=\"language-text\">403</code> error message. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">)</span>\n    result <span class=\"token operator\">=</span> call_api<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'second [</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> start<span class=\"token punctuation\">:</span><span class=\"token format-spec\">.2f</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">] call [</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">}</span></span><span class=\"token string\">]: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>result<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">second <span class=\"token punctuation\">[</span><span class=\"token number\">0.35</span><span class=\"token punctuation\">]</span> call <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\nsecond <span class=\"token punctuation\">[</span><span class=\"token number\">0.71</span><span class=\"token punctuation\">]</span> call <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\nsecond <span class=\"token punctuation\">[</span><span class=\"token number\">1.07</span><span class=\"token punctuation\">]</span> call <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\nsecond <span class=\"token punctuation\">[</span><span class=\"token number\">1.43</span><span class=\"token punctuation\">]</span> call <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\nsecond <span class=\"token punctuation\">[</span><span class=\"token number\">1.79</span><span class=\"token punctuation\">]</span> call <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\nsecond <span class=\"token punctuation\">[</span><span class=\"token number\">2.15</span><span class=\"token punctuation\">]</span> call <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\nsecond <span class=\"token punctuation\">[</span><span class=\"token number\">2.50</span><span class=\"token punctuation\">]</span> call <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\nsecond <span class=\"token punctuation\">[</span><span class=\"token number\">2.86</span><span class=\"token punctuation\">]</span> call <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\nsecond <span class=\"token punctuation\">[</span><span class=\"token number\">3.21</span><span class=\"token punctuation\">]</span> call <span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\nsecond <span class=\"token punctuation\">[</span><span class=\"token number\">3.57</span><span class=\"token punctuation\">]</span> call <span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK</code></pre></div>\n<p>However, this is far from ideal, since we're stuck introducing delays into our code. What we actually would like to do is to be able to call the API as soon as the quota window has passed. We need to keep track of the request times and throttle our own calls. </p>\n<h3>First attempt: function wrapper</h3>\n<p>Let's start with a function wrapper. Say we need to call the API an arbitrary number of times. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">request_limiter</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> max_calls<span class=\"token punctuation\">,</span> period<span class=\"token operator\">=</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    results <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    calls <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    \n    <span class=\"token comment\"># call the api n times</span>\n    <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n        <span class=\"token comment\"># Sleep cycle logic:</span>\n        <span class=\"token comment\"># if we're exceeding the limit ...</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>calls<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> max_calls<span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># calculate the minimum sleeping time</span>\n            sleeptime <span class=\"token operator\">=</span> period <span class=\"token operator\">-</span> calls<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> calls<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> \n            <span class=\"token keyword\">if</span> sleeptime <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># and wait</span>\n                time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span>sleeptime<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># API call </span>\n        result <span class=\"token operator\">=</span> call_api<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        results <span class=\"token operator\">+=</span> <span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">]</span>\n\n        <span class=\"token comment\"># keep track of calls within the time window</span>\n        now <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        calls <span class=\"token operator\">+=</span> <span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span>\n        calls <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>t <span class=\"token keyword\">for</span> t <span class=\"token keyword\">in</span> calls <span class=\"token keyword\">if</span> now <span class=\"token operator\">-</span> t <span class=\"token operator\">&lt;</span> period<span class=\"token punctuation\">]</span> \n    \n    <span class=\"token keyword\">return</span> results</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">results <span class=\"token operator\">=</span> request_limiter<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> result <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'call [</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">}</span></span><span class=\"token string\">]: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>result<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">call <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\ncall <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\ncall <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\ncall <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\ncall <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\ncall <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\ncall <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\ncall <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\ncall <span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\ncall <span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK</code></pre></div>\n<h3>Improved version: as a decorator</h3>\n<p>The main limitation of the simple functional implementation above is that we have to provide to it the number of times that we want to query the API in order to be able to then keep a memory of the state inside the function. What if we don't know how many times we need to call the API ? What if these calls come from different places ? </p>\n<p>We need to keep track of the calls that we're making dynamically, i.e. the state needs to live outside of the function making the calls: a stateful decorator. </p>\n<p>Although stateful decorators can be implemented using the function itself as the <a href=\"https://realpython.com/primer-on-python-decorators/#stateful-decorators\">object state</a>, it's much more intelligible to implement it in a classic class structure.  </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">from</span> functools <span class=\"token keyword\">import</span> wraps\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">RequestLimiter</span><span class=\"token punctuation\">:</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> max_calls<span class=\"token punctuation\">,</span> period<span class=\"token operator\">=</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>max_calls <span class=\"token operator\">=</span> max_calls <span class=\"token comment\"># number of calls limit</span>\n        self<span class=\"token punctuation\">.</span>period <span class=\"token operator\">=</span> period       <span class=\"token comment\"># time window </span>\n        self<span class=\"token punctuation\">.</span>calls <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">__call__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token decorator annotation punctuation\">@wraps</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">wrapper</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            \n            <span class=\"token comment\"># Sleep cycle </span>\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>calls<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> self<span class=\"token punctuation\">.</span>max_calls<span class=\"token punctuation\">:</span>\n                sleeptime <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>period <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>_timespan\n                <span class=\"token keyword\">if</span> sleeptime <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span>sleeptime<span class=\"token punctuation\">)</span>\n            \n            <span class=\"token comment\"># function call </span>\n            rv <span class=\"token operator\">=</span> f<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span> <span class=\"token comment\"># `rv` = return value</span>\n            \n            <span class=\"token comment\"># keep track of calls within the time window</span>\n            now <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>calls <span class=\"token operator\">+=</span> <span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span>\n            self<span class=\"token punctuation\">.</span>calls <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>t <span class=\"token keyword\">for</span> t <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>calls <span class=\"token keyword\">if</span> now <span class=\"token operator\">-</span> t <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>period<span class=\"token punctuation\">]</span>\n            \n            <span class=\"token keyword\">return</span> rv\n        <span class=\"token keyword\">return</span> wrapper\n\n    <span class=\"token decorator annotation punctuation\">@property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_timespan</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>calls<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>calls<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> </code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@RequestLimiter</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">call_api_throttled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> call_api<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nstart <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    result <span class=\"token operator\">=</span> call_api_throttled<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'second [</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> start<span class=\"token punctuation\">:</span><span class=\"token format-spec\">.2f</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">] call [</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">}</span></span><span class=\"token string\">]: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>result<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">second <span class=\"token punctuation\">[</span><span class=\"token number\">0.15</span><span class=\"token punctuation\">]</span> call <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\nsecond <span class=\"token punctuation\">[</span><span class=\"token number\">0.31</span><span class=\"token punctuation\">]</span> call <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\nsecond <span class=\"token punctuation\">[</span><span class=\"token number\">0.46</span><span class=\"token punctuation\">]</span> call <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\nsecond <span class=\"token punctuation\">[</span><span class=\"token number\">0.61</span><span class=\"token punctuation\">]</span> call <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\nsecond <span class=\"token punctuation\">[</span><span class=\"token number\">0.77</span><span class=\"token punctuation\">]</span> call <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\nsecond <span class=\"token punctuation\">[</span><span class=\"token number\">1.31</span><span class=\"token punctuation\">]</span> call <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\nsecond <span class=\"token punctuation\">[</span><span class=\"token number\">1.46</span><span class=\"token punctuation\">]</span> call <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\nsecond <span class=\"token punctuation\">[</span><span class=\"token number\">1.62</span><span class=\"token punctuation\">]</span> call <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\nsecond <span class=\"token punctuation\">[</span><span class=\"token number\">1.77</span><span class=\"token punctuation\">]</span> call <span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\nsecond <span class=\"token punctuation\">[</span><span class=\"token number\">1.92</span><span class=\"token punctuation\">]</span> call <span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK</code></pre></div>\n<h3>The context manager version</h3>\n<p>In this particular context manager implementation, the context lives outside of the <code class=\"language-text\">with</code> block. However: every time we enter the <code class=\"language-text\">with</code> block we're back again inside the same context and the same state as when we left. Thus, the context manager keeps track of the state outside of the <code class=\"language-text\">with</code> block and enforces the required behaviour when we enter the <code class=\"language-text\">with</code> block. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">from</span> functools <span class=\"token keyword\">import</span> wraps\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">RequestLimiter</span><span class=\"token punctuation\">:</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> max_calls<span class=\"token punctuation\">,</span> period<span class=\"token operator\">=</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>max_calls <span class=\"token operator\">=</span> max_calls <span class=\"token comment\"># number of calls limit</span>\n        self<span class=\"token punctuation\">.</span>period <span class=\"token operator\">=</span> period       <span class=\"token comment\"># time window </span>\n        self<span class=\"token punctuation\">.</span>calls <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">__enter__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Sleep cycle </span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>calls<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> self<span class=\"token punctuation\">.</span>max_calls<span class=\"token punctuation\">:</span>\n            sleeptime <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>period <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>_timespan\n            <span class=\"token keyword\">if</span> sleeptime <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span>sleeptime<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> self\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__exit__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> exc_type<span class=\"token punctuation\">,</span> exc_val<span class=\"token punctuation\">,</span> exc_tb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># keep track of calls within the time window</span>\n        now <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>calls <span class=\"token operator\">+=</span> <span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>calls <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>t <span class=\"token keyword\">for</span> t <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>calls <span class=\"token keyword\">if</span> now <span class=\"token operator\">-</span> t <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>period<span class=\"token punctuation\">]</span>\n    \n    <span class=\"token decorator annotation punctuation\">@property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_timespan</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>calls<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>calls<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> </code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">limiter <span class=\"token operator\">=</span> RequestLimiter<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># the state lives outside of the function calls </span>\nstart <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">with</span> limiter<span class=\"token punctuation\">:</span> \n        <span class=\"token comment\"># >>>>> we enter the context manager's state &lt;&lt;&lt;&lt;&lt;</span>\n        <span class=\"token comment\"># ------------------------------------------------</span>\n        <span class=\"token comment\"># based on its state, the context manager decides</span>\n        <span class=\"token comment\"># when to to execute the code inside the block </span>\n        result <span class=\"token operator\">=</span> call_api<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'second [</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> start<span class=\"token punctuation\">:</span><span class=\"token format-spec\">.2f</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">] call [</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">}</span></span><span class=\"token string\">]: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>result<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">second <span class=\"token punctuation\">[</span><span class=\"token number\">0.15</span><span class=\"token punctuation\">]</span> call <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\nsecond <span class=\"token punctuation\">[</span><span class=\"token number\">0.31</span><span class=\"token punctuation\">]</span> call <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\nsecond <span class=\"token punctuation\">[</span><span class=\"token number\">0.46</span><span class=\"token punctuation\">]</span> call <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\nsecond <span class=\"token punctuation\">[</span><span class=\"token number\">0.61</span><span class=\"token punctuation\">]</span> call <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\nsecond <span class=\"token punctuation\">[</span><span class=\"token number\">0.76</span><span class=\"token punctuation\">]</span> call <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\nsecond <span class=\"token punctuation\">[</span><span class=\"token number\">1.31</span><span class=\"token punctuation\">]</span> call <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\nsecond <span class=\"token punctuation\">[</span><span class=\"token number\">1.46</span><span class=\"token punctuation\">]</span> call <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\nsecond <span class=\"token punctuation\">[</span><span class=\"token number\">1.61</span><span class=\"token punctuation\">]</span> call <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\nsecond <span class=\"token punctuation\">[</span><span class=\"token number\">1.76</span><span class=\"token punctuation\">]</span> call <span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\nsecond <span class=\"token punctuation\">[</span><span class=\"token number\">1.92</span><span class=\"token punctuation\">]</span> call <span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK</code></pre></div>\n<h3>Adding decorator syntax support</h3>\n<p>We can add decorator syntax support with a simple modification of the <code class=\"language-text\">__call__</code> method, just as we did before. However, this time we don 't need to implement the entire logic again: simply make use of the context manager logic within the decorator. </p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">from</span> functools <span class=\"token keyword\">import</span> wraps\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">RequestLimiter</span><span class=\"token punctuation\">:</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> max_calls<span class=\"token punctuation\">,</span> period<span class=\"token operator\">=</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>max_calls <span class=\"token operator\">=</span> max_calls <span class=\"token comment\"># number of calls limit</span>\n        self<span class=\"token punctuation\">.</span>period <span class=\"token operator\">=</span> period       <span class=\"token comment\"># time window </span>\n        self<span class=\"token punctuation\">.</span>calls <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    \n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">def</span> <span class=\"token function\">__call__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token decorator annotation punctuation\">@wraps</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token keyword\">def</span> <span class=\"token function\">wrapper</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span><span class=\"gatsby-highlight-code-line\">            <span class=\"token keyword\">with</span> self<span class=\"token punctuation\">:</span></span><span class=\"gatsby-highlight-code-line\">                <span class=\"token keyword\">return</span> f<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token keyword\">return</span> wrapper</span>    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">__enter__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Sleep cycle </span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>calls<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> self<span class=\"token punctuation\">.</span>max_calls<span class=\"token punctuation\">:</span>\n            sleeptime <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>period <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>_timespan\n            <span class=\"token keyword\">if</span> sleeptime <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span>sleeptime<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> self\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__exit__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> exc_type<span class=\"token punctuation\">,</span> exc_val<span class=\"token punctuation\">,</span> exc_tb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># keep track of calls within the time window</span>\n        now <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>calls <span class=\"token operator\">+=</span> <span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>calls <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>t <span class=\"token keyword\">for</span> t <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>calls <span class=\"token keyword\">if</span> now <span class=\"token operator\">-</span> t <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>period<span class=\"token punctuation\">]</span>\n    \n    <span class=\"token decorator annotation punctuation\">@property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_timespan</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>calls<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>calls<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> </code></pre></div>\n<p>This is as simple and elegant as it gets.</p>\n<p>Let's take this decorator for a spin.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@RequestLimiter</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">call_api_throttled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> call_api<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nstart <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    result <span class=\"token operator\">=</span> call_api_throttled<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'second [</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> start<span class=\"token punctuation\">:</span><span class=\"token format-spec\">.2f</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">] call [</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">}</span></span><span class=\"token string\">]: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>result<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">second <span class=\"token punctuation\">[</span><span class=\"token number\">0.15</span><span class=\"token punctuation\">]</span> call <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\nsecond <span class=\"token punctuation\">[</span><span class=\"token number\">0.31</span><span class=\"token punctuation\">]</span> call <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\nsecond <span class=\"token punctuation\">[</span><span class=\"token number\">0.46</span><span class=\"token punctuation\">]</span> call <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\nsecond <span class=\"token punctuation\">[</span><span class=\"token number\">0.61</span><span class=\"token punctuation\">]</span> call <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\nsecond <span class=\"token punctuation\">[</span><span class=\"token number\">0.77</span><span class=\"token punctuation\">]</span> call <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\nsecond <span class=\"token punctuation\">[</span><span class=\"token number\">1.31</span><span class=\"token punctuation\">]</span> call <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\nsecond <span class=\"token punctuation\">[</span><span class=\"token number\">1.47</span><span class=\"token punctuation\">]</span> call <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\nsecond <span class=\"token punctuation\">[</span><span class=\"token number\">1.62</span><span class=\"token punctuation\">]</span> call <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\nsecond <span class=\"token punctuation\">[</span><span class=\"token number\">1.77</span><span class=\"token punctuation\">]</span> call <span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK\nsecond <span class=\"token punctuation\">[</span><span class=\"token number\">1.93</span><span class=\"token punctuation\">]</span> call <span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span>: <span class=\"token number\">200</span> OK</code></pre></div>\n<p>Same as before.</p>\n<p>Thank you for reading ! </p>","timeToRead":10,"frontmatter":{"title":"Build a request limiter using Python context managers (and decorators)","date":"Dec 31, 2018","tags":["python","context manager","decorator","generator","rate limiter","tutorial"]}}},"pageContext":{"slug":"/python-context-managers/","prev":{"fields":{"slug":"/python-decorators/"},"html":"<div class=\"custom-block snippet\"><div class=\"custom-block-body\"><p>Whether you are a beginner or an advanced programmer, there are many reasons why you should choose Python for your next coding project. Python is a scripted language with an almost stupidly simple syntax, it is easy to learn and powerful to use. One of the main reasons that <del>I love</del> people love Python is that it offers quite a few specific metaphors (a.k.a. paradigms) for doing certain things. One of these things involves wrapping functions with some repetitively used code. And so, in your quest to becoming a true Pythonista lie a type function that will help you improve and streamline your code: <strong>decorators</strong>.</p></div></div>\n<h2>Wrapping a function</h2>\n<p>Imagine we have some API endpoint. We will simulate the behaviour of that endpoint with the <code class=\"language-text\">api_endpoint</code> function, which will return a response after a 1 second delay.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">def</span> <span class=\"token function\">api_endpoint</span><span class=\"token punctuation\">(</span>seconds<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span>seconds<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'API response'</span></code></pre></div>\n<p>Let's say that in our application we have a function that performs a request to this api endpoint and subsequently returns the result.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">call_api</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    result <span class=\"token operator\">=</span> api_endpoint<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> result\n\nresult <span class=\"token operator\">=</span> call_api<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'result: '</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">result:  API response</code></pre></div>\n<p>Now let's imagine that we would like to time the execution of our api call. We can easily do this by using the <code class=\"language-text\">time.time</code> function and calculating the difference between the <em>before</em> and <em>after</em> times.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">call_api_timed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># [1] >>> start timer</span>\n    start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># [2] >>> call the api</span>\n    result <span class=\"token operator\">=</span> api_endpoint<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># [3] >>> end timer, print the time difference</span>\n    <span class=\"token comment\">#         and return the result</span>\n    end <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'seconds:'</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> result\n\nresult <span class=\"token operator\">=</span> call_api_timed<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'result: '</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">seconds: 1.0051519870758057\nresult:  API response</code></pre></div>\n<p>Works as expected !</p>\n<h2>The Python way</h2>\n<p>In Python we strive to do the minimum that gets the job done. That's the essence of a true Pythonista: no upfront design required, no complicated code necessary. Simply write the most bare bones, quick and dumb program you can that gets the job done and move on (go home to your kids what are you doing so late at your job?).</p>\n<p>However, there are times when keeping things primitive only makes the overall picture increasingly complicated. This is especially true when our application performs lots of repetitive tasks. This is where the magic of Python lies: Python allows you to extend your code in a simple way, without introducing much overhead. For that purpose it offers a number of coding paradigms, one of which we're going to be using today: <strong>decorators</strong>.</p>\n<h4><em>Decorators are repeatable bit of code that you want to run <strong>before</strong> and <strong>after</strong> some function execution.</em></h4>\n<p>In our example we wrote 3 lines of code within our <code class=\"language-text\">call_api</code> function in order to keep track of how long the api takes to respond. Imagine now that we have multiple different functions that call different API endpoints and we would also like to time them. If we keep doing it the same way as we did earlier, a lot of code would start to get duplicated.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#</span>\n<span class=\"token comment\"># We would have to repeat the same lines of code</span>\n<span class=\"token comment\"># for all the following functions</span>\n<span class=\"token comment\"># ...</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">api_endpoint_2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">api_endpoint_3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">api_endpoint_4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n<span class=\"token comment\"># ...</span>\n<span class=\"token comment\"># ...</span>\n<span class=\"token comment\"># ...</span></code></pre></div>\n<p>The problem with duplication is that it affects code <strong>readability</strong> and <strong>maintainability</strong>: our code becomes harder to read and more difficult and time consuming to maintain.</p>\n<p>To solve this issue, let us define a function that automatically does the timing for us.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">time_me</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">wrapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">### BEFORE CODE</span>\n        <span class=\"token comment\"># [1] >>> start timer</span>\n        start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">### EXECUTE FUNCTION</span>\n        <span class=\"token comment\"># [2] >>> call the function we're wrapping</span>\n        result <span class=\"token operator\">=</span> func<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">### AFTER CODE</span>\n        <span class=\"token comment\"># [3] >>> end timer, print the time difference</span>\n        <span class=\"token comment\">#         and return the result</span>\n        end <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'seconds:'</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> result\n    <span class=\"token keyword\">return</span> wrapper\n\ntimed_api_call <span class=\"token operator\">=</span> time_me<span class=\"token punctuation\">(</span>call_api<span class=\"token punctuation\">)</span>\ntimed_api_call<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">seconds: 1.0002648830413818\n&#39;API response&#39;</code></pre></div>\n<p>In the above example we wrote the function <code class=\"language-text\">time_me</code>, which accepts another function (our API endpoint calls) as argument and then effectively returns this function <em>wrapped</em> with some extra code: in our case the same lines we wrote before.</p>\n<p>Notice that <code class=\"language-text\">time_me</code> indeed returns a function:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">timed_api_call</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;function __main__.time_me.&lt;locals&gt;.wrapper()&gt;</code></pre></div>\n<p>Thus, whenever we call <code class=\"language-text\">timed_api_call</code>, we're actually calling the <code class=\"language-text\">wrapper</code> code block within the <code class=\"language-text\">time_me</code> function. This paradigm is often referred to as <strong>function composition</strong>.</p>\n<p>Ins't this just plain Awesome ?! We can now wrap this timer around any other function and print out the time it took to execute just as well as get the result back.</p>\n<p>Nevertheless, this introduces another, albeit minor, problem: long and convoluted lines of code. If we start to chain functions one after another, our code will become increasingly hard to read.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">first_function<span class=\"token punctuation\">(</span>second_function<span class=\"token punctuation\">(</span>third_function<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>In addition, we still need to explicitly perform the function composition by writing <code class=\"language-text\">timed_api_call = time_me(call_api)</code>. There's gotta be a better way smh...</p>\n<h2>Decorator syntax</h2>\n<p>Enter the decorator syntactic sugar. With the Python decorator syntax, we can set a function A to wrap around another function B simply by adding an <code class=\"language-text\">@</code> (function A would then be called a decorator) in front of it before function B's definition. Like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@function_A</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">function_B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span></code></pre></div>\n<p>Every time we call <code class=\"language-text\">function_B</code>, <code class=\"language-text\">function_A</code> is executed beforehand. A decorator is thus just that: a nice-looking wrapper function.</p>\n<p>There no more extra code we need to write, simply <strong>decorate</strong> our <code class=\"language-text\">call_api</code> function with the <code class=\"language-text\">time_me</code> decorator:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@time_me</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">call_api</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    res <span class=\"token operator\">=</span> api_endpoint<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> res\n\nresult <span class=\"token operator\">=</span> call_api<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'result: '</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">seconds: 1.004122257232666\nresult:  API response</code></pre></div>\n<p>It just works !</p>\n<h3>How to deal with arguments</h3>\n<p>We can also extend the functionality of our decorator by having it pass incoming arguments to the wrapped function.</p>\n<p>We want the function that is returned by <code class=\"language-text\">time_me</code>, i.e. <code class=\"language-text\">wrapper</code>, to accept and pass on the arguments that the wrapped function accepts. Luckily Python has some additional syntactic sugar to allow for an arbitrary number of arguments and keyed arguments to be passed around.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">time_me</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">wrapper</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">## accept arguments        </span>\n        <span class=\"token comment\">### BEFORE CODE</span>\n        start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># start time</span>\n\n        <span class=\"token comment\">### EXECUTE FUNCTION</span>\n        <span class=\"token comment\"># >>> pass the arguments to the function we're wrapping</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'arguments passed:'</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> kwargs<span class=\"token punctuation\">)</span>\n        result <span class=\"token operator\">=</span> func<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">### AFTER CODE</span>\n        end <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'seconds:'</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> result\n    <span class=\"token keyword\">return</span> wrapper\n\n<span class=\"token decorator annotation punctuation\">@time_me</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">call_api</span><span class=\"token punctuation\">(</span>seconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    res <span class=\"token operator\">=</span> api_endpoint<span class=\"token punctuation\">(</span>seconds<span class=\"token operator\">=</span>seconds<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> res\n\nresult <span class=\"token operator\">=</span> call_api<span class=\"token punctuation\">(</span><span class=\"token number\">1.5</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'result: '</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">arguments passed: (1.5,) {}\nseconds: 1.5012753009796143\nresult:  API response</code></pre></div>\n<h2>Decorators that accept arguments</h2>\n<p>\"Can we pass arguments to the decorator itself ?\" you might ask. The answer is yes ! But we would have to do some additional modifications to allow our decorator to accept arguments. Let's say you would want this function to sometimes print seconds, while other times you would rather have it print milliseconds.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> functools <span class=\"token keyword\">import</span> wraps\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">time_me</span><span class=\"token punctuation\">(</span>milliseconds<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">decorator</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token decorator annotation punctuation\">@wraps</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">wrapper</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\">### BEFORE CODE</span>\n            start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\">### EXECUTE FUNCTION</span>\n            result <span class=\"token operator\">=</span> func<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\">### AFTER CODE</span>\n            <span class=\"token comment\"># >>> print in seconds or milliseconds</span>\n            end <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> milliseconds<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'milliseconds:'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'seconds:'</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> result\n        <span class=\"token keyword\">return</span> wrapper\n    <span class=\"token comment\"># >>> time_me will return the \"actual\" decorator</span>\n    <span class=\"token keyword\">return</span> decorator\n\n<span class=\"token decorator annotation punctuation\">@time_me</span><span class=\"token punctuation\">(</span>milliseconds<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">call_api</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    res <span class=\"token operator\">=</span> api_endpoint<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> res</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">call_api<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">milliseconds: 1000.8730888366699\n&#39;API response&#39;</code></pre></div>\n<p>Success !</p>\n<p>Don't worry too much about the <code class=\"language-text\">@wraps</code> decorator: it's a special Python function that renames the wrapper name into the function that it's wrapping.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">## without @wraps</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>call_api<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;function time_me.&lt;locals&gt;.decorator.&lt;locals&gt;.wrapper at 0x11160a2f0&gt;</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">## with @wraps</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>call_api<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;function call_api at 0x11160a268&gt;</code></pre></div>\n<p>It helps with debugging. Keep this in mind when you're writing open source code or if you're expecting other people to work with your functions.  </p>\n<h3>One last thing</h3>\n<p>With a little bit of care, you can also define decorators that can be used both with and without arguments. Most likely, you donâ€™t need this, but it is nice to have the flexibility.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> functools <span class=\"token keyword\">import</span> wraps\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">time_me</span><span class=\"token punctuation\">(</span>_func<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> milliseconds<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token comment\">### same as before</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">decorator</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token decorator annotation punctuation\">@wraps</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">wrapper</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            result <span class=\"token operator\">=</span> func<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n            end <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> milliseconds<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'milliseconds:'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'seconds:'</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> result\n        <span class=\"token keyword\">return</span> wrapper\n\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">### >>> call the decorator if the first argument is a function</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">### >>> otherwise return the decorator function (without calling it)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">if</span> _func <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token keyword\">return</span> decorator</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token keyword\">return</span> decorator<span class=\"token punctuation\">(</span>_func<span class=\"token punctuation\">)</span></span></code></pre></div>\n<p>Then all the following can work:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@time_me</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">call_api_1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    res <span class=\"token operator\">=</span> api_endpoint<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> res\n\n<span class=\"token decorator annotation punctuation\">@time_me</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">call_api_2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    res <span class=\"token operator\">=</span> api_endpoint<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> res\n\n<span class=\"token decorator annotation punctuation\">@time_me</span><span class=\"token punctuation\">(</span>milliseconds<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">call_api_3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    res <span class=\"token operator\">=</span> api_endpoint<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> res</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>call_api_1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>call_api_2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>call_api_3<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">seconds: 1.0042738914489746\nAPI response\nseconds: 1.0040597915649414\nAPI response\nmilliseconds: 1002.3050308227539\nAPI response</code></pre></div>\n<h2>Bonus: Class implementation</h2>\n<p>Python treats everything as an object. <strong>Everything</strong>. That includes variables, functions, classes, lists, etc.</p>\n<p>Python includes special class syntax that allows a decorator to be expressed in a class form. Whenever a class instance is called, the Python interpreter calls the <code class=\"language-text\">__call__</code> method in the background for us. We can intercept this calling by overriding this class method in our class definition.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TimeMe</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> milliseconds<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>milliseconds <span class=\"token operator\">=</span> milliseconds\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__call__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token decorator annotation punctuation\">@wraps</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">decorator</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            result <span class=\"token operator\">=</span> func<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n            end <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>milliseconds<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'milliseconds:'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'seconds:'</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> result\n        <span class=\"token keyword\">return</span> decorator     </code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">timer <span class=\"token operator\">=</span> TimeMe<span class=\"token punctuation\">(</span>milliseconds<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@timer</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">some_func_1</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>x\n\n<span class=\"token decorator annotation punctuation\">@TimeMe</span><span class=\"token punctuation\">(</span>milliseconds<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">some_func_2</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">3</span><span class=\"token operator\">*</span>x</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'result: '</span><span class=\"token punctuation\">,</span> some_func_1<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'result: '</span><span class=\"token punctuation\">,</span> some_func_2<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">milliseconds: <span class=\"token number\">0.00095367431640625</span>\nresult:  <span class=\"token number\">200</span>\nmilliseconds: <span class=\"token number\">0.0021457672119140625</span>\nresult:  <span class=\"token number\">300</span></code></pre></div>\n<p>Thank you for reading ! </p>","timeToRead":8,"frontmatter":{"title":"Learn Python decorators to simplify repeated pieces of logic","date":"2018-12-30","tags":["python","decorators","programming","tutorial","functional programming","composed functions"]}},"next":null}}}