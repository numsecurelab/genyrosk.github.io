{"componentChunkName":"component---src-templates-blog-post-js","path":"/python-context-managers/","result":{"data":{"markdownRemark":{"id":"cb4b1157-4cd8-5e46-87fd-ad171003de97","excerpt":"We'll put Python generators and context managers together ! Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut laboreâ€¦","html":"<p>We'll put Python generators and context managers together ! Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">some_generator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token number\">2</span></code></pre></div>","timeToRead":1,"frontmatter":{"title":"Python Context Managers","date":"Dec 31, 2018","tags":["python","decorators","programming"]}}},"pageContext":{"slug":"/python-context-managers/","prev":{"fields":{"slug":"/python-decorators/"},"html":"<p>Whether you are a beginner or an advanced programmer, there are many reasons why you should choose Python for your next coding project. Python is a scripted language with an almost stupidly simple syntax, it is easy to learn and powerful to use. One of the main reasons that <del>I love</del> people love Python is that it offers quite a few specific metaphors (a.k.a. paradigms) for doing certain things. One of these things involves wrapping functions with some repetitively used code. And so, in your quest to becoming a true Pythonista lie a type function that will help you improve and streamline your code: <strong>decorators</strong>.</p>\n<h2>Wrapping a function</h2>\n<p>Imagine we have some API endpoint. We will simulate the behaviour of that endpoint with the <code class=\"language-text\">api_endpoint</code> function, which will return a response after a 1 second delay.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">def</span> <span class=\"token function\">api_endpoint</span><span class=\"token punctuation\">(</span>seconds<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span>seconds<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'API response'</span></code></pre></div>\n<p>Let's say that in our application we have a function that performs a request to this api endpoint and subsequently returns the result.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">call_api</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    result <span class=\"token operator\">=</span> api_endpoint<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> result\n\nresult <span class=\"token operator\">=</span> call_api<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'result: '</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">result:  API response</code></pre></div>\n<p>Now let's imagine that we would like to time the execution of our api call. We can easily do this by using the <code class=\"language-text\">time.time</code> function and calculating the difference between the <em>before</em> and <em>after</em> times.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">call_api_timed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># [1] >>> start timer</span>\n    start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># [2] >>> call the api</span>\n    result <span class=\"token operator\">=</span> api_endpoint<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># [3] >>> end timer, print the time difference</span>\n    <span class=\"token comment\">#         and return the result</span>\n    end <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'seconds:'</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> result\n\nresult <span class=\"token operator\">=</span> call_api_timed<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'result: '</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">seconds: 1.0051519870758057\nresult:  API response</code></pre></div>\n<p>Works as expected !</p>\n<h2>The Python way</h2>\n<p>In Python we strive to do the minimum that gets the job done. That's the essence of a true Pythonista: no upfront design required, no complicated code necessary. Simply write the most bare bones, quick and dumb program you can that gets the job done and move on (go home to your kids what are you doing so late at your job?).</p>\n<p>However, there are times when keeping things primitive only makes the overall picture increasingly complicated. This is especially true when our application performs lots of repetitive tasks. This is where the magic of Python lies: Python allows you to extend your code in a simple way, without introducing much overhead. For that purpose it offers a number of coding paradigms, one of which we're going to be using today: <strong>decorators</strong>.</p>\n<blockquote>\n<p>Decorators are repeatable bit of code that you want to run <strong>before</strong> and <strong>after</strong> some function execution.</p>\n</blockquote>\n<p>In our example we wrote 3 lines of code within our <code class=\"language-text\">call_api</code> function in order to keep track of how long the api takes to respond. Imagine now that we have multiple different functions that call different API endpoints and we would also like to time them. If we keep doing it the same way as we did earlier, a lot of code would start to get duplicated.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#</span>\n<span class=\"token comment\"># We would have to repeat the same lines of code</span>\n<span class=\"token comment\"># for all the following functions</span>\n<span class=\"token comment\"># ...</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">api_endpoint_2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">api_endpoint_3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">api_endpoint_4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n<span class=\"token comment\"># ...</span>\n<span class=\"token comment\"># ...</span>\n<span class=\"token comment\"># ...</span></code></pre></div>\n<p>The problem with duplication is that it affects code <strong>readability</strong> and <strong>maintainability</strong>: our code becomes harder to read and more difficult and time consuming to maintain.</p>\n<p>To solve this issue, let us define a function that automatically does the timing for us.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">time_me</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">wrapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">### BEFORE CODE</span>\n        <span class=\"token comment\"># [1] >>> start timer</span>\n        start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">### EXECUTE FUNCTION</span>\n        <span class=\"token comment\"># [2] >>> call the function we're wrapping</span>\n        result <span class=\"token operator\">=</span> func<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">### AFTER CODE</span>\n        <span class=\"token comment\"># [3] >>> end timer, print the time difference</span>\n        <span class=\"token comment\">#         and return the result</span>\n        end <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'seconds:'</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> result\n    <span class=\"token keyword\">return</span> wrapper\n\ntimed_api_call <span class=\"token operator\">=</span> time_me<span class=\"token punctuation\">(</span>call_api<span class=\"token punctuation\">)</span>\ntimed_api_call<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">seconds: 1.0002648830413818\n&#39;API response&#39;</code></pre></div>\n<p>In the above example we wrote the function <code class=\"language-text\">time_me</code>, which accepts another function (our API endpoint calls) as argument and then effectively returns this function <em>wrapped</em> with some extra code: in our case the same lines we wrote before.</p>\n<p>Notice that <code class=\"language-text\">time_me</code> indeed returns a function:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">timed_api_call</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;function __main__.time_me.&lt;locals&gt;.wrapper()&gt;</code></pre></div>\n<p>Thus, whenever we call <code class=\"language-text\">timed_api_call</code>, we're actually calling the <code class=\"language-text\">wrapper</code> code block within the <code class=\"language-text\">time_me</code> function. This paradigm is often referred to as <strong>function composition</strong>.</p>\n<p>Ins't this just plain Awesome ?! We can now wrap this timer around any other function and print out the time it took to execute just as well as get the result back.</p>\n<p>Nevertheless, this introduces another, albeit minor, problem: long and convoluted lines of code. If we start to chain functions one after another, our code will become increasingly hard to read.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">first_function<span class=\"token punctuation\">(</span>second_function<span class=\"token punctuation\">(</span>third_function<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>In addition, we still need to explicitly perform the function composition by writing <code class=\"language-text\">timed_api_call = time_me(call_api)</code>. There's gotta be a better way smh...</p>\n<h2>Decorator syntax</h2>\n<p>Enter the decorator syntactic sugar. With the Python decorator syntax, we can set a function A to wrap around another function B simply by adding an <code class=\"language-text\">@</code> (function A would then be called a decorator) in front of it before function B's definition. Like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@function_A</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">function_B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span></code></pre></div>\n<p>Every time we call <code class=\"language-text\">function_B</code>, <code class=\"language-text\">function_A</code> is executed beforehand. A decorator is thus just that: a nice-looking wrapper function.</p>\n<p>There no more extra code we need to write, simply <strong>decorate</strong> our <code class=\"language-text\">call_api</code> function with the <code class=\"language-text\">time_me</code> decorator:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@time_me</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">call_api</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    res <span class=\"token operator\">=</span> api_endpoint<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> res\n\nresult <span class=\"token operator\">=</span> call_api<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'result: '</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">seconds: 1.004122257232666\nresult:  API response</code></pre></div>\n<p>It just works !</p>\n<h3>How to deal with arguments</h3>\n<p>We can also extend the functionality of our decorator by having it pass incoming arguments to the wrapped function.</p>\n<p>We want the function that is returned by <code class=\"language-text\">time_me</code>, i.e. <code class=\"language-text\">wrapper</code>, to accept and pass on the arguments that the wrapped function accepts. Luckily Python has some additional syntactic sugar to allow for an arbitrary number of arguments and keyed arguments to be passed around.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">time_me</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">wrapper</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">## accept arguments        </span>\n        <span class=\"token comment\">### BEFORE CODE</span>\n        start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># start time</span>\n\n        <span class=\"token comment\">### EXECUTE FUNCTION</span>\n        <span class=\"token comment\"># >>> pass the arguments to the function we're wrapping</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'arguments passed:'</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> kwargs<span class=\"token punctuation\">)</span>\n        result <span class=\"token operator\">=</span> func<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">### AFTER CODE</span>\n        end <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'seconds:'</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> result\n    <span class=\"token keyword\">return</span> wrapper\n\n<span class=\"token decorator annotation punctuation\">@time_me</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">call_api</span><span class=\"token punctuation\">(</span>seconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    res <span class=\"token operator\">=</span> api_endpoint<span class=\"token punctuation\">(</span>seconds<span class=\"token operator\">=</span>seconds<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> res\n\nresult <span class=\"token operator\">=</span> call_api<span class=\"token punctuation\">(</span><span class=\"token number\">1.5</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'result: '</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">arguments passed: (1.5,) {}\nseconds: 1.5012753009796143\nresult:  API response</code></pre></div>\n<h2>Decorators that accept arguments</h2>\n<p>\"Can we pass arguments to the decorator itself ?\" you might ask. The answer is yes ! But we would have to do some additional modifications to allow our decorator to accept arguments. Let's say you would want this function to sometimes print seconds, while other times you would rather have it print milliseconds.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> functools <span class=\"token keyword\">import</span> wraps\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">time_me</span><span class=\"token punctuation\">(</span>milliseconds<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">decorator</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token decorator annotation punctuation\">@wraps</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">wrapper</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\">### BEFORE CODE</span>\n            start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\">### EXECUTE FUNCTION</span>\n            result <span class=\"token operator\">=</span> func<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\">### AFTER CODE</span>\n            <span class=\"token comment\"># >>> print in seconds or milliseconds</span>\n            end <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> milliseconds<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'milliseconds:'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'seconds:'</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> result\n        <span class=\"token keyword\">return</span> wrapper\n    <span class=\"token comment\"># >>> time_me will return the \"actual\" decorator</span>\n    <span class=\"token keyword\">return</span> decorator\n\n<span class=\"token decorator annotation punctuation\">@time_me</span><span class=\"token punctuation\">(</span>milliseconds<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">call_api</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    res <span class=\"token operator\">=</span> api_endpoint<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> res</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">call_api<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">milliseconds: 1000.8730888366699\n&#39;API response&#39;</code></pre></div>\n<p>Success !</p>\n<p>Don't worry too much about the <code class=\"language-text\">@wraps</code> decorator: it's a special Python function that renames the wrapper name into the function that it's wrapping.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">## without @wraps</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>call_api<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;function time_me.&lt;locals&gt;.decorator.&lt;locals&gt;.wrapper at 0x11160a2f0&gt;</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">## with @wraps</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>call_api<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;function call_api at 0x11160a268&gt;</code></pre></div>\n<p>It helps with debugging. Keep this in mind when you're writing open source code or if you're expecting other people to work with your functions.  </p>\n<h3>One last thing</h3>\n<p>With a little bit of care, you can also define decorators that can be used both with and without arguments. Most likely, you donâ€™t need this, but it is nice to have the flexibility.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> functools <span class=\"token keyword\">import</span> wraps\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">time_me</span><span class=\"token punctuation\">(</span>_func<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> milliseconds<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token comment\">### same as before</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">decorator</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token decorator annotation punctuation\">@wraps</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">wrapper</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            result <span class=\"token operator\">=</span> func<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n            end <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> milliseconds<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'milliseconds:'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'seconds:'</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> result\n        <span class=\"token keyword\">return</span> wrapper\n\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">### >>> call the decorator if the first argument is a function</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">### >>> otherwise return the decorator function (without calling it)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">if</span> _func <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token keyword\">return</span> decorator</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token keyword\">return</span> decorator<span class=\"token punctuation\">(</span>_func<span class=\"token punctuation\">)</span></span></code></pre></div>\n<p>Then all the following can work:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@time_me</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">call_api_1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    res <span class=\"token operator\">=</span> api_endpoint<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> res\n\n<span class=\"token decorator annotation punctuation\">@time_me</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">call_api_2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    res <span class=\"token operator\">=</span> api_endpoint<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> res\n\n<span class=\"token decorator annotation punctuation\">@time_me</span><span class=\"token punctuation\">(</span>milliseconds<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">call_api_3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    res <span class=\"token operator\">=</span> api_endpoint<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> res</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>call_api_1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>call_api_2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>call_api_3<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">seconds: 1.0042738914489746\nAPI response\nseconds: 1.0040597915649414\nAPI response\nmilliseconds: 1002.3050308227539\nAPI response</code></pre></div>\n<h2>Bonus: Class implementation</h2>\n<p>Python treats everything as an object. <strong>Everything</strong>. That includes variables, functions, classes, lists, etc.</p>\n<p>Python includes special class syntax that allows a decorator to be expressed in a class form. Whenever a class instance is called, the Python interpreter calls the <code class=\"language-text\">__call__</code> method in the background for us. We can intercept this calling by overriding this class method in our class definition.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TimeMe</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> milliseconds<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>milliseconds <span class=\"token operator\">=</span> milliseconds\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__call__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token decorator annotation punctuation\">@wraps</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">decorator</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            result <span class=\"token operator\">=</span> func<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n            end <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>milliseconds<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'milliseconds:'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'seconds:'</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> result\n        <span class=\"token keyword\">return</span> decorator     </code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">timer <span class=\"token operator\">=</span> TimeMe<span class=\"token punctuation\">(</span>milliseconds<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@timer</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">some_func_1</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>x\n\n<span class=\"token comment\"># </span>\n<span class=\"token comment\"># or</span>\n<span class=\"token comment\">#</span>\n\n<span class=\"token decorator annotation punctuation\">@TimeMe</span><span class=\"token punctuation\">(</span>milliseconds<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">some_func_2</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">3</span><span class=\"token operator\">*</span>x</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'result: '</span><span class=\"token punctuation\">,</span> some_func_1<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'result: '</span><span class=\"token punctuation\">,</span> some_func_2<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">milliseconds: 0.00095367431640625\nresult:  200\nmilliseconds: 0.0021457672119140625\nresult:  300</code></pre></div>","timeToRead":8,"frontmatter":{"title":"Python Decorators","date":"2018-12-30","tags":["python","decorators","programming"]}},"next":null}}}