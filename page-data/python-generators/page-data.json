{"componentChunkName":"component---src-templates-blog-post-js","path":"/python-generators/","result":{"data":{"markdownRemark":{"id":"d50b2709-2a20-548a-a550-469955ffc73b","excerpt":"There are already many very helpful tutorials on the subject out there. In this piece I wanted to share my own take and experience with python generators that Iâ€¦","html":"<h4><strong><em>There are already many very helpful tutorials on the subject out there. In this piece I wanted to share my own take and experience with python generators that I have gathered while working on production-level Python code.</em></strong></h4>\n<!-- # Intro -->\n<div class=\"custom-block snippet\"><div class=\"custom-block-body\"><p>Whether you are familiar with Python generators or you have only heard a thing or two about them, allow me to summarise the 2 main properties of generator functions: </p><ul>\n<li>generators are <strong>stateful</strong> functions. </li>\n<li>generators <strong>delay computations until necessary</strong>. </li>\n</ul><p>As you are about to see, these properties make generators incredibly useful. </p></div></div>\n<h2>Generator functions vs generator instances</h2>\n<p>Let's take a look at a simple example: </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">generator_func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    a <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">yield</span> a\n    a <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n    <span class=\"token keyword\">yield</span> a</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> generator_inst <span class=\"token operator\">=</span> generator_func<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Notice how we're using the special <code class=\"language-text\">yield</code> statement instead of the typical <code class=\"language-text\">return</code>. This is done on purpose: <code class=\"language-text\">generator_func</code> is a <strong>generator function</strong> while <code class=\"language-text\">generator_inst</code> is a <strong>generator instance</strong>, the \"true\" generator if you prefer. </p>\n<p>The purpose of a generator function is to build the generator instance, while the generator instance is the actual object that is going to run the specified code. This is because, as we will see more in detail later, <strong>generators are stateful</strong>. Thus we need to initialize an instance of this generator in its initial state, that will change everytime we make call it. </p>\n<p>We can trace an analogy with Python classes: everything starts with the class definition, which describes how different parts of it work together, and when called returns an instance of itself that holds all the inner methods and variables. In short, class definitions are meant to define and build, while class instances are meant to be built and executed. </p>\n<p>As you might have inferred based on this analogy, a generator instance, just like a class instance, is not a value. A generator instance is a <strong>mapped computation</strong> object that sits in a certain memory address (unlike functions). We can check it like so: </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> generator_func\n<span class=\"token operator\">&lt;</span>function __main__<span class=\"token punctuation\">.</span>generator_func<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> generator_instance\n<span class=\"token operator\">&lt;</span>generator <span class=\"token builtin\">object</span> generator at <span class=\"token number\">0x1111401a8</span><span class=\"token operator\">></span></code></pre></div>\n<p>Notice how the generator instance is an object located in the <code class=\"language-text\">0x1111401a8</code> memory address. </p>\n<p>From now on we'll refer to the generator instance simply as a <em>generator</em>. Albeit, don't be suprised if the term 'generator' is used to refer to the generator function as well. </p>\n<h2>Retrieve values from generators using <code class=\"language-text\">yield</code>/<code class=\"language-text\">next</code></h2>\n<p>At this point, you might be thinking:</p>\n<h3><em>\"Wait... but if inspecting the generator returns this address that stores the computation, how do I access the value that it's supposed to return ?\"</em></h3>\n<p>This is where the <code class=\"language-text\">yield</code>/<code class=\"language-text\">next</code> pair truly kicks in. </p>\n<p><code class=\"language-text\">yield</code> is a statment, i.e. a syntactic expression, that specifies the value that a generator returns, or, more precisely, the value that the generator <strong>yields</strong>, while <code class=\"language-text\">next</code> is a special Python function that summons the generator's inner code to execute until it encounters a <code class=\"language-text\">yield</code> statment, at which point it simply returns (yields) the specified value. </p>\n<p>The reason why the generator <em>yields</em> instead of <em>returning</em>, is because a function return implies that the function has finished executing, that there's nothing left for that function to do. A generator can <em>yield</em> as many values as a programmer desires. It can <em>yield</em> values indefinetely in fact. When the <code class=\"language-text\">return</code> expression is used in a generator, the generator exits and computation is finished. </p>\n<p>Following our class analogy, you can think of <code class=\"language-text\">next</code> as a class method. </p>\n<p>Let's look at our example again:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">generator_func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    a <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">yield</span> a\n    a <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n    <span class=\"token keyword\">yield</span> a\n    \ngenerator_inst <span class=\"token operator\">=</span> generator_func<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Let's pass the generator instance to the special <code class=\"language-text\">next</code> function.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>generator_inst<span class=\"token punctuation\">)</span>\n<span class=\"token number\">0</span></code></pre></div>\n<p>Awesome ! We got a value out of our generator ! So what just happened ? </p>\n<p>The generator started on line 1, and assigned <code class=\"language-text\">0</code> to the variable <code class=\"language-text\">a</code>. Then it executed the <code class=\"language-text\">yield a</code> statement and yielded the value of <code class=\"language-text\">a</code>. </p>\n<h3><em>\"So... is this it then ?\"</em></h3>\n<p>Well, the generator is now <strong>paused</strong>: it stopped at the yield statement, and is waiting for us to call it again to resume its computation. So let's do just that:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>generator_inst<span class=\"token punctuation\">)</span>\n<span class=\"token number\">10</span></code></pre></div>\n<p>We got the new value of <code class=\"language-text\">a</code> out ! Let's try one more time:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>generator_inst<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>\nStopIteration                             Traceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>ipython<span class=\"token operator\">-</span><span class=\"token builtin\">input</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token operator\">-</span><span class=\"token number\">50ee8ff2a4f6</span><span class=\"token operator\">></span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span>\n<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>generator_inst<span class=\"token punctuation\">)</span>\n\nStopIteration<span class=\"token punctuation\">:</span></code></pre></div>\n<p>Oh oh, something wrong must have happened there... But this is actually the expected behaviour: once the Python interpreter understand that there's not more code to be executed inside of a generator, it will promptly raise a special exception called <code class=\"language-text\">StopIteration</code>. In fact, the exact same thing will happen if we add a <code class=\"language-text\">return</code> statement at the end:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">generator_func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    a <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">yield</span> a\n    a <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n    <span class=\"token keyword\">yield</span> a\n    <span class=\"token keyword\">return</span>\n    \ngenerator_inst <span class=\"token operator\">=</span> generator_func<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>generator_inst<span class=\"token punctuation\">)</span> <span class=\"token comment\"># yields 0</span>\n<span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>generator_inst<span class=\"token punctuation\">)</span> <span class=\"token comment\"># yields 10</span>\n<span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>generator_inst<span class=\"token punctuation\">)</span> <span class=\"token comment\"># StopIteration is raised</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token number\">0</span>\n<span class=\"token number\">10</span>\n---------------------------------------------------------------------------\nStopIteration                             Traceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>ipython-input-5-50ee8ff2a4f<span class=\"token operator\"><span class=\"token file-descriptor important\">6</span>></span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span>\n----<span class=\"token operator\">></span> <span class=\"token number\">1</span> next<span class=\"token punctuation\">(</span>generator_inst<span class=\"token punctuation\">)</span>\n\nStopIteration:</code></pre></div>\n<p>You might be shaking your head and wondering why has it been designed this way. Can't the generator signal that it finished in some other way ? Well, not really, not in Python at least. </p>\n<p>But this exception is actually very useful, it can be easily captured and will thus prevent unnecessary computation. </p>\n<p>You can of course watch out for the exception explcitely:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">generator_inst <span class=\"token operator\">=</span> generator_func<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">while</span> true<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        value <span class=\"token operator\">=</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>generator_inst<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> StopIteration<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">break</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'done'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token number\">0</span>\n<span class=\"token number\">10</span>\n<span class=\"token keyword\">done</span></code></pre></div>\n<p>But the Python way would be do it in a for loop. Why ? Because in additionto calling <code class=\"language-text\">next</code> on the generator for you, Python <code class=\"language-text\">for</code> loops automatically check for the <code class=\"language-text\">StopIteration</code> exception for you and will exit the loop context as soon as this exception is raised. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">for</span> value <span class=\"token keyword\">in</span> generator_func<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># you can call the function immediately</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'done'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token number\">0</span>\n<span class=\"token number\">10</span>\n<span class=\"token keyword\">done</span></code></pre></div>\n<p>Much, much, much neater. </p>\n<h2>Generators are stateful</h2>\n<p>This means that in between calls, a generator is capable of storing state. Think of state as a variable or a collection of variables that holds values. A generator is thus capable of returning values that depend on that state. </p>\n<p>Let us illustrate it with another generator function where we have a stateful variable <code class=\"language-text\">a</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">generator_func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    a <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">while</span> a <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">:</span>\n        a <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">yield</span> a\n        \ng <span class=\"token operator\">=</span> generator_func<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> value <span class=\"token keyword\">in</span> g<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token number\">1</span>\n<span class=\"token number\">2</span>\n<span class=\"token number\">3</span>\n<span class=\"token number\">4</span>\n<span class=\"token number\">5</span></code></pre></div>\n<p>Everytime the generator is called, it executes all the lines of code until it reaches a <code class=\"language-text\">yield</code> statement. During this execution, the value of <code class=\"language-text\">a</code> changes and is then yielded back to us. </p>\n<p>This functionality can be very useful if we need the output of the generator to depend on a previous state. </p>\n<h2>Pass values back to the generator</h2>\n<p>We have seen how to get values form a generator, but we are yet to see how we can <strong>pass values back to the generator</strong>. </p>\n<p>Yes, you heard that right. In addition to yielding a continuous stream of output values, generators can also accept a continuous stream of input values, which they can then use to compute the next output (they are stateful after all). </p>\n<p>To pass a value back to the generator, use the <code class=\"language-text\">.send(value)</code> method on the generator instance. </p>\n<p>Let's see how this works with an example:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">my_generator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n    a <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a:'</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span>\n    a <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a:'</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">yield</span>\n    \ng <span class=\"token operator\">=</span> my_generator<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">a: <span class=\"token number\">1</span>\na: <span class=\"token number\">2</span></code></pre></div>\n<p>You might be wondering why we are calling the <code class=\"language-text\">next</code> function in the beggining. It's due to the order in which the <code class=\"language-text\">yield</code> statement executes its actions:</p>\n<ul>\n<li>it first returns the value that it's yielding and <strong>pauses</strong></li>\n<li>it then assigns the value that it's passed with <code class=\"language-text\">.send(value)</code> and the generator continues running until it encounters the next <code class=\"language-text\">yield</code> statement</li>\n</ul>\n<p>So can you retrieve and send values at the same time ? Of course ! In the following example we will print the stateful variables inside of the generator to better understand what's going on:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">my_generator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    a <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1) state ->  a:'</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span>\n    b <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> a\n    \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2) state ->  a:'</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> <span class=\"token string\">', b:'</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n    b <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> a <span class=\"token operator\">*</span> b\n    \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3) state ->  a:'</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> <span class=\"token string\">', b:'</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">yield</span> a <span class=\"token operator\">*</span> b\n    \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'4) state ->  a:'</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> <span class=\"token string\">', b:'</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n\ng <span class=\"token operator\">=</span> my_generator<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'yield:'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'yield:'</span><span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'yield:'</span><span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'yield:'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> state -<span class=\"token operator\">></span>  a: <span class=\"token number\">2</span>\nyield: <span class=\"token number\">2</span> \n\n<span class=\"token number\">2</span><span class=\"token punctuation\">)</span> state -<span class=\"token operator\">></span>  a: <span class=\"token number\">2</span> , b: <span class=\"token number\">10</span>\nyield: <span class=\"token number\">20</span> \n\n<span class=\"token number\">3</span><span class=\"token punctuation\">)</span> state -<span class=\"token operator\">></span>  a: <span class=\"token number\">2</span> , b: <span class=\"token number\">200</span>\nyield: <span class=\"token number\">400</span> \n\n<span class=\"token number\">4</span><span class=\"token punctuation\">)</span> state -<span class=\"token operator\">></span>  a: <span class=\"token number\">2</span> , b: <span class=\"token number\">1000</span>\n\n---------------------------------------------------------------------------\nStopIteration                             Traceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>ipython-input-59-96abd9b795ea<span class=\"token operator\">></span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span>\n     <span class=\"token number\">16</span> print<span class=\"token punctuation\">(</span><span class=\"token string\">'yield:'</span>, gen.send<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>, <span class=\"token string\">'<span class=\"token entity\" title=\"\\n\">\\n</span>'</span><span class=\"token punctuation\">)</span>\n     <span class=\"token number\">17</span> print<span class=\"token punctuation\">(</span><span class=\"token string\">'yield:'</span>, gen.send<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>, <span class=\"token string\">'<span class=\"token entity\" title=\"\\n\">\\n</span>'</span><span class=\"token punctuation\">)</span>\n---<span class=\"token operator\">></span> <span class=\"token number\">18</span> print<span class=\"token punctuation\">(</span><span class=\"token string\">'yield:'</span>, gen.send<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>, <span class=\"token string\">'<span class=\"token entity\" title=\"\\n\">\\n</span>'</span><span class=\"token punctuation\">)</span>\n     <span class=\"token number\">19</span> print<span class=\"token punctuation\">(</span><span class=\"token string\">'yield:'</span>, next<span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">)</span>, <span class=\"token string\">'<span class=\"token entity\" title=\"\\n\">\\n</span>'</span><span class=\"token punctuation\">)</span>\n\nStopIteration:</code></pre></div>\n<p>Note how the last call will raise a <code class=\"language-text\">StopIteration</code> exception. Remember: The exception is raised when the generator reaches the end of its code and there are no more <code class=\"language-text\">yield</code> statements left to execute. </p>\n<h2>Generators delay computations until necessary</h2>\n<h3>A prime numbers generator</h3>\n<p>A more eloquent way of putting it would be to say that that generators <strong>map an input value to a computation</strong> as opposed to what classic functions do, which is mapping an input value to an output value. The computation is delayed until the value of that computation is explicitely requested. This paradigm is commonly referred to as <strong>lazy evaluation</strong>. </p>\n<p>Suppose you want to calculate all prime numbers up to a certain max integer. Normally you would have to calculate them all at once, wait for it to finish, and then proceed with the next thing you want to do with them. </p>\n<p>With the help of generators, you can retrieve the values as they are being computed. You could say you are <em>subscribing</em> to the stream the stream of prime numbers. This is a very powerful idea, since it allows us to do something with the values we already have without having to wait for the entire computation to finish. </p>\n<p>Let's start with a function that calculates whether a number is prime:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">is_prime</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">**</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> num <span class=\"token operator\">%</span> i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span></code></pre></div>\n<p>Now let's write up the generator:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">generate_primes</span><span class=\"token punctuation\">(</span>max_num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> max_num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> is_prime<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">yield</span> num</code></pre></div>\n<p>And iterate over its values:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">for</span> value <span class=\"token keyword\">in</span> generate_primes<span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token number\">2</span>\n<span class=\"token number\">3</span>\n<span class=\"token number\">5</span>\n<span class=\"token number\">7</span>\n<span class=\"token number\">11</span>\n<span class=\"token number\">13</span>\n<span class=\"token number\">17</span>\n<span class=\"token number\">19</span>\n<span class=\"token number\">23</span>\n<span class=\"token number\">29</span>\n<span class=\"token number\">31</span>\n<span class=\"token number\">37</span>\n<span class=\"token number\">41</span>\n<span class=\"token number\">43</span>\n<span class=\"token number\">47</span></code></pre></div>\n<h3>Animate a plot as prime numbers are being generated</h3>\n<p>Let's try something a bit more fancy. As the prime numbers are being computed, we plot them in polar coordinates on a graph. The prime number's value <strong>p</strong> will be both the distance from the origin <strong>r</strong> and the angle <strong>Î¸</strong> (in radians). The cartesian coordinates are thus $(p%20cos(p),%20p%20sin(p))$.  <img src=\"https://render.githubusercontent.com/render/math?math=e^{i \\pi} = -1\"></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> math\n<span class=\"token keyword\">import</span> time\n\n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>animation <span class=\"token keyword\">as</span> animation\n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">from</span> matplotlib <span class=\"token keyword\">import</span> style\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">is_prime</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">**</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> num <span class=\"token operator\">%</span> i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">generate_primes</span><span class=\"token punctuation\">(</span>max_num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> max_num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> is_prime<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">yield</span> num\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">polar_to_cartesian</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> theta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    x <span class=\"token operator\">=</span> r <span class=\"token operator\">*</span> math<span class=\"token punctuation\">.</span>cos<span class=\"token punctuation\">(</span>theta<span class=\"token punctuation\">)</span>\n    y <span class=\"token operator\">=</span> r <span class=\"token operator\">*</span> math<span class=\"token punctuation\">.</span>sin<span class=\"token punctuation\">(</span>theta<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">,</span> y\n\nstyle<span class=\"token punctuation\">.</span>use<span class=\"token punctuation\">(</span><span class=\"token string\">'fivethirtyeight'</span><span class=\"token punctuation\">)</span>\nfig <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nax1 <span class=\"token operator\">=</span> fig<span class=\"token punctuation\">.</span>add_subplot<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\nN_MAX <span class=\"token operator\">=</span> <span class=\"token number\">2500</span>\ng <span class=\"token operator\">=</span> generate_primes<span class=\"token punctuation\">(</span>N_MAX<span class=\"token punctuation\">)</span>\nxs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nys <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">animate</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        value <span class=\"token operator\">=</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> StopIteration<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span>\n    x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> polar_to_cartesian<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n    xs<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    ys<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\n    ax1<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    ax1<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">,</span> ys<span class=\"token punctuation\">,</span> s<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n    ax1<span class=\"token punctuation\">.</span>set_xlim<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span>N_MAX<span class=\"token punctuation\">,</span> N_MAX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    ax1<span class=\"token punctuation\">.</span>set_ylim<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span>N_MAX<span class=\"token punctuation\">,</span> N_MAX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    \n    fig<span class=\"token punctuation\">.</span>suptitle<span class=\"token punctuation\">(</span><span class=\"token string\">'Prime numbers in polar coordinates'</span><span class=\"token punctuation\">,</span> fontsize<span class=\"token operator\">=</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\n    plt<span class=\"token punctuation\">.</span>xticks<span class=\"token punctuation\">(</span>fontsize<span class=\"token operator\">=</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\n    plt<span class=\"token punctuation\">.</span>yticks<span class=\"token punctuation\">(</span>fontsize<span class=\"token operator\">=</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\n\nanim <span class=\"token operator\">=</span> animation<span class=\"token punctuation\">.</span>FuncAnimation<span class=\"token punctuation\">(</span>fig<span class=\"token punctuation\">,</span> animate<span class=\"token punctuation\">,</span> interval<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Which should generate the following plot:</p>\n<img src=\"/0445c41d0925a5976011015d649e241d/prime_numbers_spiral_2.gif\" width=\"550\" style=\"display: block; margin: 40px auto\" />\n<p>Do you notice how the prime number form these spirals from the origin ? This plot illustrates, as Grant from <a href=\"https://www.youtube.com/channel/UCYO_jab_esuFRV4b17AJtAw/featured\">3blue1brown</a> has put it: </p>\n<blockquote>\n<p>How pretty but pointless patterns in polar plots of primes prompt pretty important ponderings on properties of those primes. </p>\n</blockquote>\n<p>Definitely checkout his <a href=\"https://www.youtube.com/watch?v=EK32jo7i5LQ&#x26;t=1s\">video</a> on this to learn more (100% worth it). </p>\n<br/>\n<h2>Infinite streams</h2>\n<p>One of the most useful things you can do with generators is creating inifite streams of values. One real example that I have encountered was when I was writing a SQL query with a lot of conditional <code class=\"language-text\">WHERE</code> clauses. The first condition needs to start with a <code class=\"language-text\">WHERE</code>, while all the following ones need to be preceded with <code class=\"language-text\">AND</code>. </p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">table</span>\n<span class=\"token keyword\">WHERE</span> condition1\n<span class=\"token operator\">AND</span> condition2</code></pre></div>\n<p>The problem we had was that we didn't know if any condition was going to be applied at all. Luckily, a simple generator came to the rescue:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">where_generator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token string\">'WHERE'</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">yield</span> <span class=\"token string\">'AND'</span>\n\nwhere <span class=\"token operator\">=</span> where_generator<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>where<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">WHERE\nAND\nAND\nAND</code></pre></div>\n<p>And that's it !</p>\n<p>If you want to go to the next level of Pythonista, try using the <code class=\"language-text\">itertools</code> library provided out of the box by Python. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> itertools <span class=\"token keyword\">import</span> chain<span class=\"token punctuation\">,</span> repeat\n\nwhere <span class=\"token operator\">=</span> chain<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'WHERE'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> repeat<span class=\"token punctuation\">(</span><span class=\"token string\">'AND'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>where<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">WHERE\nAND\nAND\nAND</code></pre></div>\n<p>Thank you for reading !</p>","timeToRead":11,"frontmatter":{"title":"A gentle introduction to Python generators","date":"Apr 02, 2020","tags":["python","decorators","programming","tutorial","prime numbers","sql"]}}},"pageContext":{"slug":"/python-generators/","prev":null,"next":{"fields":{"slug":"/python-decorators/"},"html":"<div class=\"custom-block snippet\"><div class=\"custom-block-body\"><p>Whether you are a beginner or an advanced programmer, there are many reasons why you should choose Python for your next coding project. Python is a scripted language with an almost <em>stupidly simple</em> syntax, it is *easy to learn and powerful to use. One of the main reasons that <del>I love</del> people love Python is that it offers quite a few specific metaphors (a.k.a. paradigms) for doing certain things. One of these things involves <strong>wrapping functions with some repetitively used code</strong>. And so, in your quest to becoming a true Pythonista lie a type function that will help you improve and streamline your code: <strong>decorators</strong>.</p></div></div>\n<h2>Wrapping a function</h2>\n<p>Imagine we have some API endpoint. We will simulate the behaviour of that endpoint with the <code class=\"language-text\">api_endpoint</code> function, which will return a response after a 1 second delay.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">def</span> <span class=\"token function\">api_endpoint</span><span class=\"token punctuation\">(</span>seconds<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span>seconds<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'API response'</span></code></pre></div>\n<p>Let's say that in our application we have a function that performs a request to this api endpoint and subsequently returns the result.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">call_api</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    result <span class=\"token operator\">=</span> api_endpoint<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> result\n\nresult <span class=\"token operator\">=</span> call_api<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'result: '</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">result:  API response</code></pre></div>\n<p>Now let's imagine that we would like to time the execution of our api call. We can easily do this by using the <code class=\"language-text\">time.time</code> function and calculating the difference between the <em>before</em> and <em>after</em> times.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">call_api_timed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># [1] >>> start timer</span>\n    start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># [2] >>> call the api</span>\n    result <span class=\"token operator\">=</span> api_endpoint<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># [3] >>> end timer, print the time difference</span>\n    <span class=\"token comment\">#         and return the result</span>\n    end <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'seconds:'</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> result\n\nresult <span class=\"token operator\">=</span> call_api_timed<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'result: '</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">seconds: 1.0051519870758057\nresult:  API response</code></pre></div>\n<p>Works as expected !</p>\n<h2>The Python way</h2>\n<p>In Python we strive to do the minimum that gets the job done. That's the essence of a true Pythonista: no upfront design required, no complicated code necessary. Simply write the most bare bones, quick and dumb program you can that gets the job done and move on (go home to your kids what are you doing so late at your job?).</p>\n<p>However, there are times when keeping things primitive only makes the overall picture increasingly complicated. This is especially true when our application performs lots of repetitive tasks. This is where the magic of Python lies: Python allows you to extend your code in a simple way, without introducing much overhead. For that purpose it offers a number of coding paradigms, one of which we're going to be using today: <strong>decorators</strong>.</p>\n<h4><em>Decorators are repeatable bit of code that you want to run <strong>before</strong> and <strong>after</strong> some function execution.</em></h4>\n<p>In our example we wrote 3 lines of code within our <code class=\"language-text\">call_api</code> function in order to keep track of how long the api takes to respond. Imagine now that we have multiple different functions that call different API endpoints and we would also like to time them. If we keep doing it the same way as we did earlier, a lot of code would start to get duplicated.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#</span>\n<span class=\"token comment\"># We would have to repeat the same lines of code</span>\n<span class=\"token comment\"># for all the following functions</span>\n<span class=\"token comment\"># ...</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">api_endpoint_2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">api_endpoint_3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">api_endpoint_4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n<span class=\"token comment\"># ...</span>\n<span class=\"token comment\"># ...</span>\n<span class=\"token comment\"># ...</span></code></pre></div>\n<p>The problem with duplication is that it affects code <strong>readability</strong> and <strong>maintainability</strong>: our code becomes harder to read and more difficult and time consuming to maintain.</p>\n<p>To solve this issue, let us define a function that automatically does the timing for us.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">time_me</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">wrapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">### BEFORE CODE</span>\n        <span class=\"token comment\"># [1] >>> start timer</span>\n        start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">### EXECUTE FUNCTION</span>\n        <span class=\"token comment\"># [2] >>> call the function we're wrapping</span>\n        result <span class=\"token operator\">=</span> func<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">### AFTER CODE</span>\n        <span class=\"token comment\"># [3] >>> end timer, print the time difference</span>\n        <span class=\"token comment\">#         and return the result</span>\n        end <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'seconds:'</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> result\n    <span class=\"token keyword\">return</span> wrapper\n\ntimed_api_call <span class=\"token operator\">=</span> time_me<span class=\"token punctuation\">(</span>call_api<span class=\"token punctuation\">)</span>\ntimed_api_call<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">seconds: 1.0002648830413818\n&#39;API response&#39;</code></pre></div>\n<p>In the above example we wrote the function <code class=\"language-text\">time_me</code>, which accepts another function (our API endpoint calls) as argument and then effectively returns this function <em>wrapped</em> with some extra code: in our case the same lines we wrote before.</p>\n<p>Notice that <code class=\"language-text\">time_me</code> indeed returns a function:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">timed_api_call</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;function __main__.time_me.&lt;locals&gt;.wrapper()&gt;</code></pre></div>\n<p>Thus, whenever we call <code class=\"language-text\">timed_api_call</code>, we're actually calling the <code class=\"language-text\">wrapper</code> code block within the <code class=\"language-text\">time_me</code> function. This paradigm is often referred to as <strong>function composition</strong>.</p>\n<p>Ins't this just plain Awesome ?! We can now wrap this timer around any other function and print out the time it took to execute just as well as get the result back.</p>\n<p>Nevertheless, this introduces another, albeit minor, problem: long and convoluted lines of code. If we start to chain functions one after another, our code will become increasingly hard to read.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">first_function<span class=\"token punctuation\">(</span>second_function<span class=\"token punctuation\">(</span>third_function<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>In addition, we still need to explicitly perform the function composition by writing <code class=\"language-text\">timed_api_call = time_me(call_api)</code>. There's gotta be a better way smh...</p>\n<h2>Decorator syntax</h2>\n<p>Enter the decorator syntactic sugar. With the Python decorator syntax, we can set a function A to wrap around another function B simply by adding an <code class=\"language-text\">@</code> (function A would then be called a decorator) in front of it before function B's definition. Like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@function_A</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">function_B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span></code></pre></div>\n<p>Every time we call <code class=\"language-text\">function_B</code>, <code class=\"language-text\">function_A</code> is executed beforehand. A decorator is thus just that: a nice-looking wrapper function.</p>\n<p>There no more extra code we need to write, simply <strong>decorate</strong> our <code class=\"language-text\">call_api</code> function with the <code class=\"language-text\">time_me</code> decorator:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@time_me</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">call_api</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    res <span class=\"token operator\">=</span> api_endpoint<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> res\n\nresult <span class=\"token operator\">=</span> call_api<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'result: '</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">seconds: 1.004122257232666\nresult:  API response</code></pre></div>\n<p>It just works !</p>\n<h3>How to deal with arguments</h3>\n<p>We can also extend the functionality of our decorator by having it pass incoming arguments to the wrapped function.</p>\n<p>We want the function that is returned by <code class=\"language-text\">time_me</code>, i.e. <code class=\"language-text\">wrapper</code>, to accept and pass on the arguments that the wrapped function accepts. Luckily Python has some additional syntactic sugar to allow for an arbitrary number of arguments and keyed arguments to be passed around.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">time_me</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">wrapper</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">## accept arguments        </span>\n        <span class=\"token comment\">### BEFORE CODE</span>\n        start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># start time</span>\n\n        <span class=\"token comment\">### EXECUTE FUNCTION</span>\n        <span class=\"token comment\"># >>> pass the arguments to the function we're wrapping</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'arguments passed:'</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> kwargs<span class=\"token punctuation\">)</span>\n        result <span class=\"token operator\">=</span> func<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">### AFTER CODE</span>\n        end <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'seconds:'</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> result\n    <span class=\"token keyword\">return</span> wrapper\n\n<span class=\"token decorator annotation punctuation\">@time_me</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">call_api</span><span class=\"token punctuation\">(</span>seconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    res <span class=\"token operator\">=</span> api_endpoint<span class=\"token punctuation\">(</span>seconds<span class=\"token operator\">=</span>seconds<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> res\n\nresult <span class=\"token operator\">=</span> call_api<span class=\"token punctuation\">(</span><span class=\"token number\">1.5</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'result: '</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">arguments passed: (1.5,) {}\nseconds: 1.5012753009796143\nresult:  API response</code></pre></div>\n<h2>Decorators that accept arguments</h2>\n<p>\"Can we pass arguments to the decorator itself ?\" you might ask. The answer is yes ! But we would have to do some additional modifications to allow our decorator to accept arguments. Let's say you would want this function to sometimes print seconds, while other times you would rather have it print milliseconds.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> functools <span class=\"token keyword\">import</span> wraps\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">time_me</span><span class=\"token punctuation\">(</span>milliseconds<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">decorator</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token decorator annotation punctuation\">@wraps</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">wrapper</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\">### BEFORE CODE</span>\n            start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\">### EXECUTE FUNCTION</span>\n            result <span class=\"token operator\">=</span> func<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\">### AFTER CODE</span>\n            <span class=\"token comment\"># >>> print in seconds or milliseconds</span>\n            end <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> milliseconds<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'milliseconds:'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'seconds:'</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> result\n        <span class=\"token keyword\">return</span> wrapper\n    <span class=\"token comment\"># >>> time_me will return the \"actual\" decorator</span>\n    <span class=\"token keyword\">return</span> decorator\n\n<span class=\"token decorator annotation punctuation\">@time_me</span><span class=\"token punctuation\">(</span>milliseconds<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">call_api</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    res <span class=\"token operator\">=</span> api_endpoint<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> res</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">call_api<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">milliseconds: 1000.8730888366699\n&#39;API response&#39;</code></pre></div>\n<p>Success !</p>\n<p>Don't worry too much about the <code class=\"language-text\">@wraps</code> decorator: it's a special Python function that renames the wrapper name into the function that it's wrapping.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">## without @wraps</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>call_api<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;function time_me.&lt;locals&gt;.decorator.&lt;locals&gt;.wrapper at 0x11160a2f0&gt;</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">## with @wraps</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>call_api<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;function call_api at 0x11160a268&gt;</code></pre></div>\n<p>It helps with debugging. Keep this in mind when you're writing open source code or if you're expecting other people to work with your functions.  </p>\n<h3>One last thing</h3>\n<p>With a little bit of care, you can also define decorators that can be used both with and without arguments. Most likely, you donâ€™t need this, but it is nice to have the flexibility.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> functools <span class=\"token keyword\">import</span> wraps\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">time_me</span><span class=\"token punctuation\">(</span>_func<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> milliseconds<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token comment\">### same as before</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">decorator</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token decorator annotation punctuation\">@wraps</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">wrapper</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            result <span class=\"token operator\">=</span> func<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n            end <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> milliseconds<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'milliseconds:'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'seconds:'</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> result\n        <span class=\"token keyword\">return</span> wrapper\n\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">### >>> call the decorator if the first argument is a function</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">### >>> otherwise return the decorator function (without calling it)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">if</span> _func <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token keyword\">return</span> decorator</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token keyword\">return</span> decorator<span class=\"token punctuation\">(</span>_func<span class=\"token punctuation\">)</span></span></code></pre></div>\n<p>Then all the following can work:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@time_me</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">call_api_1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    res <span class=\"token operator\">=</span> api_endpoint<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> res\n\n<span class=\"token decorator annotation punctuation\">@time_me</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">call_api_2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    res <span class=\"token operator\">=</span> api_endpoint<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> res\n\n<span class=\"token decorator annotation punctuation\">@time_me</span><span class=\"token punctuation\">(</span>milliseconds<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">call_api_3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    res <span class=\"token operator\">=</span> api_endpoint<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> res</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>call_api_1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>call_api_2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>call_api_3<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">seconds: 1.0042738914489746\nAPI response\nseconds: 1.0040597915649414\nAPI response\nmilliseconds: 1002.3050308227539\nAPI response</code></pre></div>\n<h2>Bonus: Class implementation</h2>\n<p>Python treats everything as an object. <strong>Everything</strong>. That includes variables, functions, classes, lists, etc.</p>\n<p>Python includes special class syntax that allows a decorator to be expressed in a class form. Whenever a class instance is called, the Python interpreter calls the <code class=\"language-text\">__call__</code> method in the background for us. We can intercept this calling by overriding this class method in our class definition.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TimeMe</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> milliseconds<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>milliseconds <span class=\"token operator\">=</span> milliseconds\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__call__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token decorator annotation punctuation\">@wraps</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">decorator</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            result <span class=\"token operator\">=</span> func<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n            end <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>milliseconds<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'milliseconds:'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'seconds:'</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> result\n        <span class=\"token keyword\">return</span> decorator     </code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">timer <span class=\"token operator\">=</span> TimeMe<span class=\"token punctuation\">(</span>milliseconds<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@timer</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">some_func_1</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>x\n\n<span class=\"token decorator annotation punctuation\">@TimeMe</span><span class=\"token punctuation\">(</span>milliseconds<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">some_func_2</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">3</span><span class=\"token operator\">*</span>x</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'result: '</span><span class=\"token punctuation\">,</span> some_func_1<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'result: '</span><span class=\"token punctuation\">,</span> some_func_2<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">milliseconds: <span class=\"token number\">0.00095367431640625</span>\nresult:  <span class=\"token number\">200</span>\nmilliseconds: <span class=\"token number\">0.0021457672119140625</span>\nresult:  <span class=\"token number\">300</span></code></pre></div>\n<p>Thank you for reading ! </p>","timeToRead":8,"frontmatter":{"title":"Learn Python decorators to simplify repeated pieces of logic","date":"2020-04-03","tags":["python","decorators","programming","tutorial","functional programming","composed functions"]}}}}}